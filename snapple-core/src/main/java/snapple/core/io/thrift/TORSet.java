/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package snapple.core.io.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-05")
public class TORSet implements org.apache.thrift.TBase<TORSet, TORSet._Fields>, java.io.Serializable, Cloneable, Comparable<TORSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TORSet");

  private static final org.apache.thrift.protocol.TField ELEMENTS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("elementsMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("versionVector", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TORSetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TORSetTupleSchemeFactory());
  }

  public Map<TElementType,TVersionVector> elementsMap; // required
  public TVersionVector versionVector; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ELEMENTS_MAP((short)1, "elementsMap"),
    VERSION_VECTOR((short)2, "versionVector");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ELEMENTS_MAP
          return ELEMENTS_MAP;
        case 2: // VERSION_VECTOR
          return VERSION_VECTOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ELEMENTS_MAP, new org.apache.thrift.meta_data.FieldMetaData("elementsMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TElementType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TVersionVector"))));
    tmpMap.put(_Fields.VERSION_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("versionVector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TVersionVector")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TORSet.class, metaDataMap);
  }

  public TORSet() {
  }

  public TORSet(
    Map<TElementType,TVersionVector> elementsMap,
    TVersionVector versionVector)
  {
    this();
    this.elementsMap = elementsMap;
    this.versionVector = versionVector;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TORSet(TORSet other) {
    if (other.isSetElementsMap()) {
      Map<TElementType,TVersionVector> __this__elementsMap = new HashMap<TElementType,TVersionVector>(other.elementsMap.size());
      for (Map.Entry<TElementType, TVersionVector> other_element : other.elementsMap.entrySet()) {

        TElementType other_element_key = other_element.getKey();
        TVersionVector other_element_value = other_element.getValue();

        TElementType __this__elementsMap_copy_key = new TElementType(other_element_key);

        TVersionVector __this__elementsMap_copy_value = other_element_value;

        __this__elementsMap.put(__this__elementsMap_copy_key, __this__elementsMap_copy_value);
      }
      this.elementsMap = __this__elementsMap;
    }
    if (other.isSetVersionVector()) {
      this.versionVector = other.versionVector;
    }
  }

  public TORSet deepCopy() {
    return new TORSet(this);
  }

  @Override
  public void clear() {
    this.elementsMap = null;
    this.versionVector = null;
  }

  public int getElementsMapSize() {
    return (this.elementsMap == null) ? 0 : this.elementsMap.size();
  }

  public void putToElementsMap(TElementType key, TVersionVector val) {
    if (this.elementsMap == null) {
      this.elementsMap = new HashMap<TElementType,TVersionVector>();
    }
    this.elementsMap.put(key, val);
  }

  public Map<TElementType,TVersionVector> getElementsMap() {
    return this.elementsMap;
  }

  public TORSet setElementsMap(Map<TElementType,TVersionVector> elementsMap) {
    this.elementsMap = elementsMap;
    return this;
  }

  public void unsetElementsMap() {
    this.elementsMap = null;
  }

  /** Returns true if field elementsMap is set (has been assigned a value) and false otherwise */
  public boolean isSetElementsMap() {
    return this.elementsMap != null;
  }

  public void setElementsMapIsSet(boolean value) {
    if (!value) {
      this.elementsMap = null;
    }
  }

  public TVersionVector getVersionVector() {
    return this.versionVector;
  }

  public TORSet setVersionVector(TVersionVector versionVector) {
    this.versionVector = versionVector;
    return this;
  }

  public void unsetVersionVector() {
    this.versionVector = null;
  }

  /** Returns true if field versionVector is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionVector() {
    return this.versionVector != null;
  }

  public void setVersionVectorIsSet(boolean value) {
    if (!value) {
      this.versionVector = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ELEMENTS_MAP:
      if (value == null) {
        unsetElementsMap();
      } else {
        setElementsMap((Map<TElementType,TVersionVector>)value);
      }
      break;

    case VERSION_VECTOR:
      if (value == null) {
        unsetVersionVector();
      } else {
        setVersionVector((TVersionVector)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ELEMENTS_MAP:
      return getElementsMap();

    case VERSION_VECTOR:
      return getVersionVector();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ELEMENTS_MAP:
      return isSetElementsMap();
    case VERSION_VECTOR:
      return isSetVersionVector();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TORSet)
      return this.equals((TORSet)that);
    return false;
  }

  public boolean equals(TORSet that) {
    if (that == null)
      return false;

    boolean this_present_elementsMap = true && this.isSetElementsMap();
    boolean that_present_elementsMap = true && that.isSetElementsMap();
    if (this_present_elementsMap || that_present_elementsMap) {
      if (!(this_present_elementsMap && that_present_elementsMap))
        return false;
      if (!this.elementsMap.equals(that.elementsMap))
        return false;
    }

    boolean this_present_versionVector = true && this.isSetVersionVector();
    boolean that_present_versionVector = true && that.isSetVersionVector();
    if (this_present_versionVector || that_present_versionVector) {
      if (!(this_present_versionVector && that_present_versionVector))
        return false;
      if (!this.versionVector.equals(that.versionVector))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_elementsMap = true && (isSetElementsMap());
    list.add(present_elementsMap);
    if (present_elementsMap)
      list.add(elementsMap);

    boolean present_versionVector = true && (isSetVersionVector());
    list.add(present_versionVector);
    if (present_versionVector)
      list.add(versionVector);

    return list.hashCode();
  }

  @Override
  public int compareTo(TORSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetElementsMap()).compareTo(other.isSetElementsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementsMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementsMap, other.elementsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionVector()).compareTo(other.isSetVersionVector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionVector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionVector, other.versionVector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TORSet(");
    boolean first = true;

    sb.append("elementsMap:");
    if (this.elementsMap == null) {
      sb.append("null");
    } else {
      sb.append(this.elementsMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionVector:");
    if (this.versionVector == null) {
      sb.append("null");
    } else {
      sb.append(this.versionVector);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TORSetStandardSchemeFactory implements SchemeFactory {
    public TORSetStandardScheme getScheme() {
      return new TORSetStandardScheme();
    }
  }

  private static class TORSetStandardScheme extends StandardScheme<TORSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TORSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ELEMENTS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.elementsMap = new HashMap<TElementType,TVersionVector>(2*_map0.size);
                TElementType _key1;
                TVersionVector _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = new TElementType();
                  _key1.read(iprot);
                  _val2 = new TVersionVector();
                  _val2.read(iprot);
                  struct.elementsMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setElementsMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION_VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.versionVector = new TVersionVector();
              struct.versionVector.read(iprot);
              struct.setVersionVectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TORSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.elementsMap != null) {
        oprot.writeFieldBegin(ELEMENTS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.elementsMap.size()));
          for (Map.Entry<TElementType, TVersionVector> _iter4 : struct.elementsMap.entrySet())
          {
            _iter4.getKey().write(oprot);
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.versionVector != null) {
        oprot.writeFieldBegin(VERSION_VECTOR_FIELD_DESC);
        struct.versionVector.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TORSetTupleSchemeFactory implements SchemeFactory {
    public TORSetTupleScheme getScheme() {
      return new TORSetTupleScheme();
    }
  }

  private static class TORSetTupleScheme extends TupleScheme<TORSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TORSet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetElementsMap()) {
        optionals.set(0);
      }
      if (struct.isSetVersionVector()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetElementsMap()) {
        {
          oprot.writeI32(struct.elementsMap.size());
          for (Map.Entry<TElementType, TVersionVector> _iter5 : struct.elementsMap.entrySet())
          {
            _iter5.getKey().write(oprot);
            _iter5.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetVersionVector()) {
        struct.versionVector.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TORSet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.elementsMap = new HashMap<TElementType,TVersionVector>(2*_map6.size);
          TElementType _key7;
          TVersionVector _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = new TElementType();
            _key7.read(iprot);
            _val8 = new TVersionVector();
            _val8.read(iprot);
            struct.elementsMap.put(_key7, _val8);
          }
        }
        struct.setElementsMapIsSet(true);
      }
      if (incoming.get(1)) {
        struct.versionVector = new TVersionVector();
        struct.versionVector.read(iprot);
        struct.setVersionVectorIsSet(true);
      }
    }
  }

}

